#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 11 11:47:29 2023

@author: cevert
"""

import pandas as pd
import numpy as np
import openai
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import matplotlib
import matplotlib.pyplot as plt

df_reviews = pd.read_csv('/Users/cevert/Desktop/ai_projects/recursive_sum_clustering/review_embeddings.csv')
df_reviews = df_reviews.filter(regex='^(?!Unnamed.*)') 
df_reviews["Embedding"] = df_reviews.Embedding.apply(eval).apply(np.array)

matrix = np.vstack(df_reviews.Embedding.values)
matrix.shape

# Calculate inertia for different numbers of clusters  
inertia = []  
K = range(1, 11)  
for k in K:  
    kmeans_elbow = KMeans(n_clusters=k, init="k-means++", random_state=42)  
    kmeans_elbow.fit(matrix)  
    inertia.append(kmeans_elbow.inertia_)  
  
# Plot the Elbow Method graph  
plt.figure()  
plt.plot(K, inertia, 'bo-')  
plt.xlabel('Number of Clusters')  
plt.ylabel('Inertia')  
plt.title('Elbow Method')  
plt.show()  

# Choose the "elbow" as # of clusters

n_clusters = 6

kmeans = KMeans(n_clusters=n_clusters, init="k-means++", random_state=42)
kmeans.fit(matrix)
labels = kmeans.labels_
df_reviews["Cluster"] = labels

#change the random state
tsne = TSNE(n_components=2, perplexity=15, random_state=41, init="random", learning_rate=200)
vis_dims2 = tsne.fit_transform(matrix)

x = [x for x, y in vis_dims2]
y = [y for x, y in vis_dims2]

for category, color in enumerate(["purple", "green", "red", "blue"]):
    xs = np.array(x)[df_reviews.Cluster == category]
    ys = np.array(y)[df_reviews.Cluster == category]
    plt.scatter(xs, ys, color=color, alpha=0.3)

    avg_x = xs.mean()
    avg_y = ys.mean()

    plt.scatter(avg_x, avg_y, marker="x", color=color, s=100)
plt.title("Clusters identified visualized in language 2d using t-SNE")    

# Reading a review which belong to each group.
rev_per_cluster = 50

prompt = 'Summarize the main themes and trends of the customer reviews, focusing on the most specific and relevant details about the clothing items. Summaries should be geared towards what can the clothing company do to improve and be in a single paragraph.'

summaries = []
for i in range(n_clusters):  
    print(f"Cluster {i} Theme:", end=" ")  
  
    reviews = "\n".join(  
        df_reviews[df_reviews.Cluster == i]  
        .Text
        .sample(rev_per_cluster, random_state=41)  
        .values  
    )  
    
    summary = openai.ChatCompletion.create(
        engine="chat",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": reviews}
        ]
    )['choices'][0]['message']['content']
    
    print(summary)

    print("-" * 100)
    
    
    
    
    
    
    
